/*This java problem give me code and it’s output also
A thief has a knapsack with a maximum capacity of  kilograms.
There are  items, each with a given  and .
The goal is to fill the knapsack to maximize the total value without exceeding the weight capacity. 
Compute the  for each item.
Sort items in  of this ratio. 
Add items to the knapsack starting with the highest ratio.
If an item cannot fit completely, take the fraction that fits.



//Fractional Knapsack algorithm


Algorithm FractionalKnapsack(n, W, weights[], values[])
{
    // Step 1: Calculate value-to-weight ratio for each item
    for (i = 1 to n) do
    {
        ratio[i] = values[i] / weights[i]
    }
    
    // Step 2: Sort items by ratio in descending order
    sort items by ratio[] in descending order
    totalValue = 0
    remainingCapacity = W
    
    // Step 3: Pick items one by one
    for (i = 1 to n) do
    {
        if (weights[i] ≤ remainingCapacity) then
        {
            totalValue = totalValue + values[i]
            remainingCapacity = remainingCapacity - weights[i]
        }
        else
        {
            fraction = remainingCapacity / weights[i]
            totalValue = totalValue + values[i] * fraction
            remainingCapacity = 0
            break
        }
    } */

//code:
import java.util.*;

class Item {
    int weight, value;
    double ratio;

    Item(int weight, int value) {
        this.weight = weight;
        this.value = value;
        this.ratio = (double) value / weight;
    }
}

public class FractionalKnapsack {
    public static double getMaxValue(int W, Item[] items) {
        // Step 1: Sort items by value-to-weight ratio in descending order
        Arrays.sort(items, (a, b) -> Double.compare(b.ratio, a.ratio));

        double totalValue = 0.0;
        int remainingCapacity = W;

        // Step 2: Pick items one by one
        for (Item item : items) {
            if (item.weight <= remainingCapacity) {
                // Take the whole item
                totalValue += item.value;
                remainingCapacity -= item.weight;
            } else {
                // Take the fraction that fits
                double fraction = (double) remainingCapacity / item.weight;
                totalValue += item.value * fraction;
                remainingCapacity = 0;
                break;
            }
        }

        return totalValue;
    }

    public static void main(String[] args) {
        int W = 50; // Capacity of knapsack
        Item[] items = {
            new Item(10, 60),
            new Item(20, 100),
            new Item(30, 120)
        };

        double maxValue = getMaxValue(W, items);
        System.out.println("Maximum value in Knapsack = " + maxValue);
    }
}
}
//Output:
Maximum value in Knapsack = 240.0
